{"version":3,"sources":["Events.js","EventsSource.js","FormAndEventsWrapper.js","App.js","serviceWorker.js","index.js"],"names":["Events","_ref","events","react_default","a","createElement","Fragment","map","_ref2","index","address1","dateTime","eventUrl","name","key","className","href","rel","target","checkStatus","response","status","error","Error","concat","statusText","console","log","parseJSON","json","EventsSource","search","city","cb","fetch","accept","then","FormAndEventsWrapper","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","state","value","setState","event","_this2","location","preventDefault","onSubmit","type","onChange","React","Component","App","src_FormAndEventsWrapper","Boolean","window","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ec6c34b6.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({ events }) => {\n  return (\n    <section>\n      <h3>Events</h3>\n      <>\n        {events.map(({ address1, dateTime, eventUrl, name}, index) => (\n          <div key={index}>\n            <h4 className=\"event\">\n              <a href={eventUrl} rel=\"noopener noreferrer\" target=\"_blank\">{name}</a>\n            </h4>\n            <p className=\"address1\">{address1}</p>\n            <p className=\"dateTime\">{dateTime}</p>\n          </div>\n        ))}\n      </>\n    </section>\n  );\n};\n","const search = (city, cb) => {\n  return fetch(`free-beer-events?city=${city}`, {\n    accept: \"application/json\"\n  })\n    .then(checkStatus)\n    .then(parseJSON)\n    .then(cb);\n}\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  const error = new Error(`HTTP Error ${response.statusText}`);\n  error.status = response.statusText;\n  error.response = response;\n  console.log(error); // eslint-disable-line no-console\n  throw error;\n}\n\nfunction parseJSON(response) {\n  if (response.status === 204) { // handle this somewhere else?\n    return null;\n  }\n\n  return response.json();\n}\n\nconst EventsSource = { search };\nexport default EventsSource;\n","import React from 'react';\n\nimport Events from './Events';\nimport EventsSource from './EventsSource';\n\nclass FormAndEventsWrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = { value: '' };\n  }\n\n  handleChange({ target: { value } }) {\n    this.setState({ value });\n  }\n\n  handleSubmit(event) {\n    // how to merge current state with event: null? (in order to clear the events section)\n    const { value: location } = this.state;\n    console.log('A location was submitted: ' + location); // eslint-disable-line no-console\n\n    EventsSource.search(location, events => {\n      this.setState({ value: '', events });\n    });\n\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <div>\n        <section>\n          <form onSubmit={this.handleSubmit}>\n            <label>\n              City:\n              <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n            </label>\n            <input type=\"submit\" value=\"Find free beer\" />\n          </form>\n        </section>\n        {this.state.events &&\n        <Events events={this.state.events} />}\n      </div>\n    );\n  }\n}\n\nexport default FormAndEventsWrapper;\n","import React, { Component } from 'react';\nimport FormAndEventsWrapper from './FormAndEventsWrapper';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header>BeerStalker</header>\n        <main>\n          <FormAndEventsWrapper />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}